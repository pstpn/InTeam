openapi: 3.0.0
info:
  title: RacketShop
  version: v1
tags:
  - name: auth
  - name: user
  - name: admin
  - name: authorized users
  - name: all users
paths:
  /api/auth/login:
    post:
      operationId: Auth_login
      summary: login user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
  /api/auth/register:
    post:
      operationId: Auth_register
      summary: register user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                password:
                  type: string
                surname:
                  type: string
              required:
                - email
                - name
                - password
                - surname
  /api/cart:
    get:
      operationId: Cart_getCart
      summary: get cart items
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCartResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      security:
        - BearerAuth: []
    post:
      operationId: Cart_addRacket
      summary: add racket in cart
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddRacketResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                racket_id:
                  type: integer
              required:
                - quantity
                - racket_id
      security:
        - BearerAuth: []
  /api/cart/rackets/{racket_id}:
    delete:
      operationId: Rackets_deleteRacket
      summary: delete racket from cart
      parameters:
        - $ref: '#/components/parameters/WithRacketId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRacketResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      security:
        - BearerAuth: []
    put:
      operationId: Rackets_updateRacketsCount
      summary: update rackets count in cart
      parameters:
        - $ref: '#/components/parameters/WithRacketId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRacketsCountResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
              required:
                - quantity
      security:
        - BearerAuth: []
  /api/feedbacks:
    get:
      operationId: Feedbacks_getFeedbacks
      summary: get user feedbacks
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeedbacksResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      security:
        - BearerAuth: []
    post:
      operationId: Feedbacks_createFeedback
      summary: create feedback
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFeedbackResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback:
                  type: string
                racket_id:
                  type: integer
                rating:
                  type: integer
              required:
                - feedback
                - racket_id
                - rating
      security:
        - BearerAuth: []
  /api/feedbacks/rackets/{racket_id}:
    get:
      operationId: Rackets_getRacketFeedbacks
      summary: get feedbacks for racket
      parameters:
        - $ref: '#/components/parameters/WithRacketId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRacketFeedbacksResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - all users
  /api/feedbacks/{racket_id}:
    delete:
      operationId: Feedbacks_deleteFeedback
      summary: delete feedback
      parameters:
        - $ref: '#/components/parameters/WithRacketId'
      responses:
        '200':
          description: The request has succeeded.
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      security:
        - BearerAuth: []
  /api/orders:
    post:
      operationId: Orders_createOrder
      summary: create order
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                delivery_date:
                  type: string
                  format: time
                recipient_name:
                  type: string
              required:
                - address
                - delivery_date
                - recipient_name
      security:
        - BearerAuth: []
    get:
      operationId: Orders_getOrders
      summary: get orders
      parameters:
        - $ref: '#/components/parameters/WithPaging.pattern'
        - $ref: '#/components/parameters/WithPaging.field'
        - $ref: '#/components/parameters/WithPaging.sort'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrdersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - authorized users
      security:
        - BearerAuth: []
  /api/orders/{order_id}:
    get:
      operationId: Orders_getOrder
      summary: get order
      parameters:
        - $ref: '#/components/parameters/WithOrderId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - admin
      security:
        - BearerAuth: []
    patch:
      operationId: Orders_updateOrderStatus
      summary: update order status
      parameters:
        - $ref: '#/components/parameters/WithOrderId'
      responses:
        '200':
          description: The request has succeeded.
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      security:
        - BearerAuth: []
  /api/profile:
    get:
      operationId: Profile_getProfile
      summary: get user profile
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - user
      security:
        - BearerAuth: []
  /api/rackets:
    post:
      operationId: Rackets_createRacket
      summary: create racket in shop
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRacketResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - admin
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                balance:
                  type: number
                  format: float
                brand:
                  type: string
                head_size:
                  type: number
                  format: float
                price:
                  type: number
                  format: float
                quantity:
                  type: number
                  format: float
                weight:
                  type: number
                  format: float
                image:
                  type: string
                  format: binary
              required:
                - balance
                - brand
                - head_size
                - price
                - quantity
                - weight
                - image
      security:
        - BearerAuth: []
    get:
      operationId: Rackets_getRackets
      summary: get all rackets
      parameters:
        - $ref: '#/components/parameters/WithPaging.pattern'
        - $ref: '#/components/parameters/WithPaging.field'
        - $ref: '#/components/parameters/WithPaging.sort'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRacketsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - all users
  /api/rackets/{racket_id}:
    patch:
      operationId: Rackets_updateRacketQuantity
      summary: update racket quantity
      parameters:
        - $ref: '#/components/parameters/WithRacketId'
      responses:
        '200':
          description: The request has succeeded.
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      security:
        - BearerAuth: []
    get:
      operationId: Rackets_getRacket
      summary: get racket
      parameters:
        - $ref: '#/components/parameters/WithRacketId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRacketResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - all users
  /api/users:
    get:
      operationId: Users_getUsers
      summary: get all users
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - admin
      security:
        - BearerAuth: []
  /api/users/{user_id}:
    get:
      operationId: Users_getUser
      summary: get user
      parameters:
        - $ref: '#/components/parameters/WithUserId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - admin
      security:
        - BearerAuth: []
    patch:
      operationId: Users_changeUserRole
      summary: change user role
      parameters:
        - $ref: '#/components/parameters/WithUserId'
      responses:
        '200':
          description: The request has succeeded.
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      security:
        - BearerAuth: []
components:
  parameters:
    WithOrderId:
      name: order_id
      in: path
      required: true
      schema:
        type: integer
    WithPaging.field:
      name: field
      in: query
      required: false
      schema:
        type: string
      explode: false
    WithPaging.pattern:
      name: pattern
      in: query
      required: false
      schema:
        type: string
      explode: false
    WithPaging.sort:
      name: sort
      in: query
      required: false
      schema:
        type: string
      explode: false
    WithRacketId:
      name: racket_id
      in: path
      required: true
      schema:
        type: integer
    WithUserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
  schemas:
    AddRacketRequest:
      type: object
      required:
        - addRacketBody
      properties:
        addRacketBody:
          type: object
          properties:
            quantity:
              type: integer
            racket_id:
              type: integer
          required:
            - quantity
            - racket_id
    AddRacketResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithCart'
    Cart:
      type: object
      required:
        - lines
        - quantity
        - total_price
      properties:
        lines:
          type: array
          items:
            $ref: '#/components/schemas/CartLine'
        quantity:
          type: integer
        total_price:
          type: number
          format: float
    CartLine:
      type: object
      required:
        - racket_id
        - price
        - quantity
      properties:
        racket_id:
          type: integer
        price:
          type: number
          format: float
        quantity:
          type: integer
    ChangeUserRole:
      type: object
      required:
        - user_id
        - changeRoleBody
      properties:
        user_id:
          type: integer
        changeRoleBody:
          type: object
          properties:
            role:
              type: string
          required:
            - role
    CreateFeedbackRequest:
      type: object
      required:
        - createFeedbackBody
      properties:
        createFeedbackBody:
          type: object
          properties:
            feedback:
              type: string
            racket_id:
              type: integer
            rating:
              type: integer
          required:
            - feedback
            - racket_id
            - rating
    CreateFeedbackResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithFeedback'
    CreateOrderRequest:
      type: object
      required:
        - createOrderBody
      properties:
        createOrderBody:
          type: object
          properties:
            address:
              type: string
            delivery_date:
              type: string
              format: time
            recipient_name:
              type: string
          required:
            - address
            - delivery_date
            - recipient_name
    CreateRacketRequest:
      type: object
      required:
        - createRacketBody
      properties:
        createRacketBody:
          type: object
          properties:
            balance:
              type: object
            brand:
              type: object
            head_size:
              type: object
            price:
              type: object
            quantity:
              type: object
            weight:
              type: object
            image:
              type: object
          required:
            - balance
            - brand
            - head_size
            - price
            - quantity
            - weight
            - image
    CreateRacketResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithRacket'
    DeleteFeedbackRequest:
      type: object
      required:
        - racket_id
      properties:
        racket_id:
          type: integer
    DeleteRacketRequest:
      type: object
      required:
        - racket_id
      properties:
        racket_id:
          type: integer
    DeleteRacketResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithCart'
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Errors'
    Errors:
      type: string
      enum:
        - BadRequest
        - ValidationError
        - NotFoundError
        - InternalError
        - NotModifiedError
        - ConflictError
        - Unauthorized
    Feedback:
      type: object
      required:
        - date
        - feedback
        - racket_id
        - rating
      properties:
        date:
          type: string
          format: time
        feedback:
          type: string
        racket_id:
          type: integer
        rating:
          type: integer
    GetCartResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithCart'
    GetFeedbacksResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithFeedbacks'
    GetOrderRequest:
      type: object
      required:
        - order_id
      properties:
        order_id:
          type: integer
    GetOrderResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithOrder'
    GetOrdersRequest:
      type: object
      properties:
        pattern:
          type: string
        field:
          type: string
        sort:
          type: string
    GetOrdersResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithOrders'
    GetProfileResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithUser'
    GetRacketFeedbacksRequest:
      type: object
      required:
        - racket_id
      properties:
        racket_id:
          type: integer
    GetRacketFeedbacksResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithFeedbacks'
    GetRacketRequest:
      type: object
      required:
        - racket_id
      properties:
        racket_id:
          type: integer
    GetRacketResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithRacket'
    GetRacketsRequest:
      type: object
      properties:
        pattern:
          type: string
        field:
          type: string
        sort:
          type: string
    GetRacketsResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithRackets'
    GetUserRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
    GetUserResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithUser'
    GetUsersResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithUsers'
    LoginRequest:
      type: object
      required:
        - loginBody
      properties:
        loginBody:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
          required:
            - email
            - password
    LoginResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithAccessToken'
    Order:
      type: object
      required:
        - id
        - user_id
        - creation_date
        - delivery_date
        - address
        - recipient_name
        - status
        - lines
        - total_price
      properties:
        id:
          type: integer
        user_id:
          type: integer
        creation_date:
          type: string
          format: time
        delivery_date:
          type: string
          format: time
        address:
          type: string
        recipient_name:
          type: string
        status:
          type: string
        lines:
          type: array
          items:
            $ref: '#/components/schemas/OrderLine'
        total_price:
          type: number
          format: float
    OrderLine:
      type: object
      required:
        - quantity
        - racket_id
      properties:
        quantity:
          type: integer
        racket_id:
          type: integer
    Racket:
      type: object
      required:
        - id
        - brand
        - weight
        - balance
        - head_size
        - available
        - quantity
        - price
        - image
      properties:
        id:
          type: integer
        brand:
          type: string
        weight:
          type: number
          format: float
        balance:
          type: number
          format: float
        head_size:
          type: number
          format: float
        available:
          type: boolean
        quantity:
          type: integer
        price:
          type: number
          format: float
        image:
          type: string
          format: byte
    RegisterRequest:
      type: object
      required:
        - registerBody
      properties:
        registerBody:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
            password:
              type: string
            surname:
              type: string
          required:
            - email
            - name
            - password
            - surname
      description: API Requests
    RegisterResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithAccessToken'
      description: API Responses
    ResponseWithAccessToken:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
    ResponseWithCart:
      type: object
      required:
        - cart
      properties:
        cart:
          $ref: '#/components/schemas/Cart'
    ResponseWithFeedback:
      type: object
      required:
        - feedback
      properties:
        feedback:
          $ref: '#/components/schemas/Feedback'
    ResponseWithFeedbacks:
      type: object
      required:
        - feedbacks
      properties:
        feedbacks:
          type: array
          items:
            $ref: '#/components/schemas/Feedback'
    ResponseWithOrder:
      type: object
      required:
        - order
      properties:
        order:
          $ref: '#/components/schemas/Order'
    ResponseWithOrders:
      type: object
      required:
        - orders
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    ResponseWithRacket:
      type: object
      required:
        - racket
      properties:
        racket:
          $ref: '#/components/schemas/Racket'
    ResponseWithRackets:
      type: object
      required:
        - rackets
      properties:
        rackets:
          type: array
          items:
            $ref: '#/components/schemas/Racket'
    ResponseWithUser:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/User'
    ResponseWithUsers:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UpdateOrderStatusRequest:
      type: object
      required:
        - order_id
        - updateStatusBody
      properties:
        order_id:
          type: integer
        updateStatusBody:
          type: object
          properties:
            status:
              type: string
          required:
            - status
    UpdateRacketQuantityRequest:
      type: object
      required:
        - racket_id
        - updateQuantityBody
      properties:
        racket_id:
          type: integer
        updateQuantityBody:
          type: object
          properties:
            quantity:
              type: integer
          required:
            - quantity
    UpdateRacketsCountRequest:
      type: object
      required:
        - racket_id
        - updateRacketsCountBody
      properties:
        racket_id:
          type: integer
        updateRacketsCountBody:
          type: object
          properties:
            quantity:
              type: integer
          required:
            - quantity
    UpdateRacketsCountResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResponseWithCart'
    User:
      type: object
      required:
        - email
        - name
        - role
        - surname
      properties:
        email:
          type: string
        name:
          type: string
        role:
          type: string
        surname:
          type: string
    Versions:
      type: string
      enum:
        - v1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
servers:
  - url: http://localhost:8080
    description: localhost
    variables: {}
