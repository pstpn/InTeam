linters:
  disable-all: true
  enable:
    # Checks that all code identifiers does not have non-ASCII symbols in the name.
    - asciicheck
    # Checks for dangerous Unicode character sequences.
    - bidichk
    # Checks whether HTTP response body is closed successfully.
    - bodyclose
    # Canonicalheader checks whether net/http.Header uses canonical header.
    - canonicalheader
    # Containedctx is a linter that detects struct contained context.Context field.
    - containedctx
    # Copyloopvar is a linter detects places where loop variables are copied.
    - copyloopvar
    # Check declaration order and count of types, constants, variables and functions.
    - decorder
    # Checks assignments with too many blank identifiers (e.g. x, , , _, := f()).
    - dogsled
    # Tool for code clone detection.
    - dupl
    # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errname
    # Errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - errorlint
    # Check exhaustiveness of enum switch statements.
    - exhaustive
    # Gci controls Go package import order and makes it always deterministic.
    - gci
    # Checks that go compiler directive comments (//go:) are valid.
    - gocheckcompilerdirectives
    # Check that no global variables exist.
    - gochecknoglobals
    # Finds repeated strings that could be replaced by a constant.
    - goconst
    # Provides diagnostics that check for bugs, performance and style issues.
    # Extensible without recompilation through dynamic rules.
    # Dynamic rules are written declaratively with AST patterns, filters, report message and optional suggestion.
    - gocritic
    # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification.
    - gofmt
    # Checks that printf-like functions are named with f at the end.
    - goprintffuncname
    # Linter for Go source code that specializes in simplifying code.
    - gosimple
    # Inspects source code for security problems.
    - gosec
    # Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes.
    - govet
    # Detects when assignments to existing variables are not used.
    - ineffassign
    # Finds commonly misspelled English words.
    - misspell
    # An analyzer to detect magic numbers.
    - mnd
    # Enforce field tags in (un)marshaled structs.
    - musttag
    # Finds the code that returns nil even if it checks that the error is not nil.
    - nilerr
    # Checks that there is no simultaneous return of nil error and an invalid value.
    - nilnil
    # Reports ill-formed or insufficient nolint directives.
    - nolintlint
    # Reports all named returns.
    - nonamedreturns
    # Checks for misuse of Sprintf to construct a host with port in a URL.
    - nosprintfhostport
    # Checks that fmt.Sprintf can be replaced with a faster alternative.
    - perfsprint
    # Finds slice declarations that could potentially be pre-allocated.
    - prealloc
    # Checks that package variables are not reassigned.
    - reassign
    # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - revive
    # Checks whether Rows.Err of rows is checked successfully.
    - rowserrcheck
    # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed.
    - sqlclosecheck
    # It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary.
    - staticcheck
    # Stylecheck is a replacement for golint.
    - stylecheck
    # Linter that makes you use a separate _test package.
    - testpackage
    # Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes.
    - tparallel
    # Remove unnecessary type conversions.
    - unconvert
    # Reports unused function parameters.
    - unparam
    # A linter that detect the possibility to use variables/constants from the Go standard library.
    - usestdlibvars
    # Finds wasted assignment statements.
    - wastedassign
    # Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc.
    - whitespace

linters-settings:
  decorder:
    # If true, multiple global `type`, `const` and `var` declarations are allowed.
    # Default: true (disabled)
    disable-dec-num-check: false
    # If true, type declarations will be ignored for dec num check
    # Default: false (type statements are not ignored)
    disable-type-dec-num-check: true
  dogsled:
    # Checks assignments with too many blank identifiers.
    # Default: 2
    max-blank-identifiers: 3
  dupl:
    # Tokens count to trigger issue.
    # Default: 150
    threshold: 200
  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true
  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled.
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true
  goconst:
    # Minimal length of string constant.
    # Default: 3
    min-len: 2
    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3
    min-occurrences: 3
  gocritic:
    # Enable multiple checks by tags in addition to default checks.
    # Run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    # Which checks should be disabled; can't be combined with 'enabled-checks'.
    # Default: []
    disabled-checks:
      - whyNoLint
      - singleCaseSwitch
      - paramTypeCombine
      - unnamedResult
    settings:
      rangeValCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 128
        sizeThreshold: 512
      hugeParam:
        # Default: 80
        sizeThreshold: 120
  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    disable:
      - fieldalignment
      - shadow
  nilnil:
    # In addition, detect opposite situation (simultaneous return of non-nil error and valid value).
    # Default: false
    detect-opposite: true
  nolintlint:
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true
  nonamedreturns:
    # Report named error if it is assigned inside defer.
    # Default: false
    report-error-in-defer: true
  revive:
    rules:
      # Check for commonly mistaken usages of the sync/atomic package.
      - name: atomic
      # Explicitly invoking the garbage collector is, except for specific uses in benchmarking, very dubious.
      - name: call-to-gc
      # Cognitive complexity is a measure of how hard code is to understand.
      - name: cognitive-complexity
        arguments: [23]
      # Methods or fields of struct that have names different only by capitalization could be confusing.
      - name: confusing-naming
      # Function or methods that return multiple, no named, values of the same type could induce error.
      - name: confusing-results
      # The rule spots logical expressions that evaluate always to the same value.
      - name: constant-logical-expr
      # By convention, context.Context should be the first parameter of a function. This rule spots function declarations that do not follow the convention.
      - name: context-as-argument
      # Basic types should not be used as a key in context.WithValue.
      - name: context-keys-type
      # Cyclomatic complexity is a measure of code complexity. Enforcing a maximum complexity per function helps to keep code readable and maintainable.
      - name: cyclomatic
        arguments: [18]
      # This rule spots potential dataraces caused by go-routines capturing (by-reference) particular identifiers of the function from which go-routines are created.
      # The rule is able to spot two of such cases: go-routines capturing named return values, and capturing for-range values.
      - name: datarace
      # This rule warns on some common mistakes when using defer statement.
      - name: defer
      # Importing with . makes the programs much harder to understand because it is unclear whether names belong to the current package or to an imported package.
      - name: dot-imports
      # It is possible to unintentionally import the same package twice. This rule looks for packages that are imported two or more times.
      - name: duplicated-imports
      # In Go it is idiomatic to minimize nesting statements, a typical example is to avoid if-then-else constructions.
      - name: early-return
      # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
      - name: empty-block
      # Sometimes gofmt is not enough to enforce a common formatting of a code-base; this rule warns when there are heading or trailing newlines in code blocks.
      - name: empty-lines
      # This rule is designed to maintain consistency in the declaration of repeated argument and return value types in Go functions.
      - name: enforce-repeated-arg-type-style
        arguments:
          - "full"
      # By convention, for the sake of readability, variables of type error must be named with the prefix err.
      - name: error-naming
      # By convention, for the sake of readability, the errors should be last in the list of returned values by a function.
      - name: error-return
      # By convention, for better readability, error messages should not be capitalized or end with punctuation or a newline.
      - name: error-strings
      # It is possible to get a simpler program by replacing errors.New(fmt.Sprintf()) with fmt.Errorf().
      # This rule spots that kind of simplification opportunities.
      - name: errorf
      # Functions returning too many results can be hard to understand/use.
      - name: function-result-limit
        arguments: [3]
      # Typically, functions with names prefixed with Get are supposed to return a value.
      - name: get-return
      #an if-then-else conditional with identical implementations in both branches is an error.
      - name: identical-branches
      # In Go it is possible to declare identifiers that conflict with the name of an imported package.
      # This rule spots identifiers that shadow an import.
      - name: import-shadowing
      # This rule spots expressions like i += 1 and i -= 1 and proposes to change them into i++ and i--.
      - name: increment-decrement
      # This rule highlights redundant else-blocks that can be eliminated from the code.
      - name: indent-error-flow
      # Warns in the presence of code lines longer than a configured maximum.
      - name: line-length-limit
        arguments: [160]
      # Warns if nesting level of control structures (if-then-else, for, switch) exceeds a given maximum.
      - name: max-control-nesting
      # This rule warns when a function modifies one or more of its parameters.
      - name: modifies-parameter
      # This rule warns when a method modifies its receiver.
      - name: modifies-value-receiver
      # Packages declaring structs that contain other inline struct definitions can be hard to understand/read for other developers.
      - name: nested-structs
      # This rule spots logical expressions where the order of evaluation of terms seems non optimal.
      - name: optimize-operands-order
      # This rule warns when assigning the address of the variable, passing the address to append() or using it in a map.
      - name: range-val-address
      # This rule warns when a range value (or index) is used inside a closure.
      - name: range-val-in-closure
      # This rule suggests a shorter way of writing ranges that do not use the second value.
      - name: range
      # By convention, receiver names in a method should reflect their identity.
      - name: receiver-naming
      # Constant names like false, true, nil, function names like append, make, and basic type names like bool, and byte are not reserved words of the language;
      # therefore the can be redefined. Even if possible, redefining these built in names can lead to bugs very difficult to detect.
      - name: redefines-builtin-id
      # This rule warns on redundant import aliases. This happens when the alias used on the import statement matches the imported package name.
      - name: redundant-import-alias
      # explicit type conversion string(i) where i has an integer type other than rune might behave not as expected by the developer (e.g. string(42) is not "42").
      # This rule spot that kind of suspicious conversions.
      - name: string-of-int
      # To improve the readability of code, it is recommended to reduce the indentation as much as possible.
      # This rule highlights redundant else-blocks that can be eliminated from the code.
      - name: superfluous-else
      # This rule warns when using == and != for equality check time.Time and suggest to time.time.Equal method
      - name: time-equal
      # This rule checks whether a type assertion result is checked (the ok value), preventing unexpected panics.
      - name: unchecked-type-assertion
        arguments:
          - acceptIgnoredAssertionResult: true
      # Unconditional recursive calls will produce infinite recursion, thus program stack overflow.
      # This rule detects and warns about unconditional (direct) recursive calls.
      - name: unconditional-recursion
      # this rule warns on wrongly named un-exported symbols, i.e. un-exported symbols whose name start with a capital letter.
      - name: unexported-naming
      # This rule warns when an exported function or method returns a value of an un-exported type.
      - name: unexported-return
      # This rule warns when errors returned by a function are not explicitly handled on the caller side.
      - name: unhandled-error
        arguments:
          - "fmt.Printf"
          - "fmt.Println"
          - "fmt.Print"
      # This rule suggests to remove redundant statements like a break at the end of a case block, for improving the code's readability.
      - name: unnecessary-stmt
      # This rule spots and proposes to remove unreachable code.
      - name: unreachable-code
      # This rule warns on unused parameters. Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.
      - name: unused-parameter
        arguments:
          - allowRegex: "ctx"
      # Since Go 1.18, any has an alias: any. This rule proposes to replace instances of any with any.
      - name: use-any
      # This rule warns on useless break statements in case clauses of switch and select statements
      - name: useless-break
      # This rule proposes simplifications of variable declarations.
      - name: var-declaration
      # This rule warns when initialism, variable or package naming conventions are not followed.
      # It ignores functions starting with Example, Test, Benchmark, and Fuzz in test files, preserving golint original behavior.
      - name: var-naming
      # This rule warns when a sync.WaitGroup expected as a by-value parameter in a function or method.
      - name: waitgroup-by-value
  stylecheck:
    # https://staticcheck.dev/docs/configuration/options/#initialisms
    # Default: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]

issues:
  # Fix found issues (if it's supported by the linter).
  # Default: false
  fix: true
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: ".*(_test|mocks).go"
      linters:
        - gochecknoglobals
        - err113
        - mnd

run:
  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

output:
  # Sort results by the order defined in `sort-order`.
  # Default: false
  sort-results: true
  # Order to use when sorting results.
  # Require `sort-results` to `true`.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["file"]
  sort-order:
    - linter
    - severity
  # Show statistics per linter.
  # Default: false
  show-stats: true